name: CI runner 

on:
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: ['v1.24.2']
        kubectl-version: ['v1.25.0']
        kind-version: ['v0.14.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install k8s ${{ matrix.k8s-version }}
      uses: helm/kind-action@v1.6.0
      with:
        version: ${{ matrix.kind-version }}
        cluster_name: kind
        config: ./k8s/kind-config.yaml
        kubectl_version: ${{ matrix.kubectl-version }}
        node_image: kindest/node:${{ matrix.k8s-version }}

    - run: kubectl cluster-info

    - name: kubectl version
      run: kubectl

    - name: k8s pods
      run: kubectl get pods -n kube-system

    - name: Export k8s keys(client) and certificates(client, cluster CA)
      run: ./scripts/kind-export-cert.sh

    - name: Install k8s dashboard
      run: ./scripts/kind-add-dashboard.sh

    - name: Install Nginx ingress Controller
      run: ./scripts/kind-add-ingress-nginx.sh

    - name: Install MetalLB
      run: ./scripts/kind-add-metallb.sh

    - name: Deploy httpd web server and create an ingress rule for a localhost (http://demo.localdev.me:80/), Patch ingress-nginx-controller service type -> LoadBlancer
      run: ./scripts/kind-deploy-app-nginx-ingress-localhost.sh

    - name: Deploy helloweb app
      run: ./scripts/kind-deploy-app-helloweb.sh

    - name: Deploy golang-hello-world-web app
      run: ./scripts/kind-deploy-app-golang-hello-world-web.sh
      
    - name: Deploy foo-bar-service app
      run: ./scripts/kind-deploy-app-foo-bar-service.sh

    - name: Configure Ingress routing
      run: |
        kubectl apply -f ./k8s/ingress.yaml

    - name: Check Ingress and Deployments health
      run: |
        chmod +x ./scripts/cluster-health.sh
        ./scripts/cluster-health.sh

    - name: Running APP State
      run: |
        chmod +x ./scripts/app_health.sh
        ./scripts/app_health.sh

    - name: Install Apache Benchmark
      run: sudo apt-get update && sudo apt-get install apache2-utils -y
    
    - name: Load Test, Capture Load Testing Result & Post Load Testing Result as a Comment
      run: |
          chmod +x ./scripts/load_test.sh
          ./scripts/load_test.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    


    - name: Create PR Comment
      if: ${{ always() }}
      uses: wow-actions/auto-comment@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const content = fs.readFileSync('load_test_results.txt', 'utf8');
          const prNumber = '${{ github.event.number }}';
          pullRequestOpened: |
            ðŸ‘‹ @{{ author }}
            content


    # - name: Create PR Comment
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       github.rest.issues.createComment({
    #         issue_number: '${{ github.event.number }}',
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: 'ðŸ‘‹ Thanks for reporting!'
    #       })
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
